=javascript_include_tag 'video_players/vimeo'

:javascript
  let video_cme_id = "#{cme.id || ''}";
  let course_log_id = "#{@course_log.try(:id) || ''}";
  let section_log_id = "#{@course_section_log.try(:id) || ''}";
  let exam_track_id = "#{@course_lesson_log.try(:id) || ''}";
  let freeLesson = "#{@course_lesson.free}";
  let lastLessonStep = "#{@course_lesson.course_steps.all_in_order.all_active.last.id}";
  let endStepVidTime = "#{cme.vid_end_seconds || ''}";
  let updateFreeLesson = #{@course_lesson.free ? 0.30 : 0.90};
  let completionPercent = #{@course_lesson.free ? 0.30 : 0.90};
  let logId = '';
  let updateFired = false;
  let options = {
    id: "#{cme.course_video.vimeo_guid}",
    frameborder: 0,
    webkitAllowFullScreen: true,
    mozallowfullscreen: true,
    allowFullScreen: true,
    autoplay: freeLesson
  };

  let player = new Vimeo.Player('video-player-window', options);

  player.ready().catch(function(error) {
    $('.video-player-window').html('#{j render partial: 'courses/players/dacast', locals: { cme: cme }}')
  });

  let showUpgradeBtn = function(upgradeBool) {
    if(upgradeBool) {
      $("#upgrade-subscription-modal").removeClass('video-upgrade-modal-hide');
      $("#upgrade-subscription-modal").addClass('video-upgrade-modal-show');
    }
  };

  let timeUpdate = function(data) {
    var eovCounter = data.duration - parseInt(endStepVidTime)/100;
    var updateBtnCount = false;
    let vimeoRate = 1;

    player.getPlaybackRate().then(function(playbackRate) {
        vimeoRate = playbackRate
    }).catch(function(error) {
        console.log('Could not determine Playback Rate')
    });


    if(freeLesson === 'true' && video_cme_id == lastLessonStep) {
      updateBtnCount = data.duration - data.seconds < eovCounter ? true : false;
      showUpgradeBtn(updateBtnCount);
    }
    if ((data.percent >= completionPercent) && (updateFired === false)) {
      updateFired = true;
      $.ajax({
        headers: { 'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content') },
        url: '#{video_watched_data_courses_path}',
        dataType: 'json',
        data: JSON.stringify({ 'video_log_id': logId, 'cme_id': video_cme_id }),
        method: 'PATCH',
        contentType: "application/json; charset=utf-8",
        success: function(data,status,xhr){
            $("#next-lesson-modal").addClass('d-none');
            $("#next-lesson-link").removeClass('d-none');
            $("#sidebar-next-lesson-modal").addClass('d-none');
            $("#sidebar-next-lesson-link").removeClass('d-none');
            videoFinishedEvent(freeLesson, vimeoRate);
        },
        error: function(xhr,status,error){
          console.log(xhr);
        }
      });
      if(freeLesson === 'false' && video_cme_id != lastLessonStep) {
        player.off('timeupdate', timeUpdate);
      }
    }
  };

  //When the player starts send JSON request to create CMEUL
  let onPlay = function(data) {
    if (logId === '') {
      $.ajax({
        headers: { 'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content') },
        url: '#{create_video_user_log_courses_path}',
        dataType: 'json',
        data: JSON.stringify({'cmeId': video_cme_id, 'scul_id': course_log_id, 'csul_id': section_log_id, 'set_id': exam_track_id }),
        method: 'POST',
        contentType: "application/json; charset=utf-8",
        success: function(data,status,xhr){
          logId = data.video_log_id;
          videoPlayEvent();
        },
        error: function(xhr,status,error){
          console.log(xhr);
          alert(error);
        }
      });
    }
  };

  //When the user selects a specific time
  let onResume = function(data) {
    videoPlayerResumed(data);
  };

  //When the user selects a specific time
  let onPause = function(data) {
    videoPlayerPaused(data);
  };

  //When the user selects a specific time
  let timeSeeked = function(data) {
    videoPlayerSeeked(data);
  };

  //When the user adjusts the volume
  let volumeChange = function(data) {
    videoVolumeChange(data);
  };

  //When the user adjusts the playback speed
  let playbackRateChange = function(data) {
    videoPlaybackRateChange(data);
  };

  //When the user adjusts the volume
  let fullScreenChange = function(data) {
    videoFullScreenChange(data);
  };

  //When the user adjusts the volume
  let qualityChange = function(data) {
    videoQualityChange(data);
  };

  player.on('play', onPlay);
  player.on('pause', onPause);
  player.on('timeupdate', timeUpdate);
  player.on('seeked', timeSeeked);
  player.on('volumechange', volumeChange);
  player.on('playbackratechange', playbackRateChange);
  player.on('fullscreenchange', fullScreenChange);
  player.on('qualitychange', qualityChange);
