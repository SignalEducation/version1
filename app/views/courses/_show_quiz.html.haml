-if @course_module_element.try(:course_module_element_quiz).try(:enough_questions?) || current_user.try(:admin?) || @course_module_jumbo_quiz
  .row
    .col-sm-12
      %h1.courses-title
        =@course_module_element.try(:name) || @course_module_jumbo_quiz.try(:name)
  .row
    .col-sm-12
      .progress
        .progress-bar.quiz-progress-bar{role: 'progressbar', aria: {valuenow: 0, valuemin: 0, valuemax: 100}, style: 'width: 0%'}
          %span.sr-only 0% Complete
          0%
  -@quiz_questions.each do |question|
    =render partial: 'quiz_questions/show', locals: {question: question, hide_me: true}

  =form_for @course_module_element_user_log, url: courses_url, html: {style: 'display: none;'} do |f|
    =f.text_field :user_id
    =f.text_field :course_module_id
    =f.text_field :course_module_element_id
    =f.text_field :course_module_jumbo_quiz_id
    =f.text_field :time_taken_in_seconds, value: (Time.now.to_i * -1)
    =f.fields_for :quiz_attempts do |attempt|
      =attempt.text_field :user_id
      =attempt.text_field :quiz_question_id
      =attempt.text_field :quiz_answer_id
      =attempt.text_field :answer_array

-else
  .row
    .col-sm-12
      .well.well-lg
        Sorry, there are not enough questions to present this quiz

:javascript

  var easyList = #{@easy_ids},
      mediumList = #{@medium_ids},
      difficultList = #{@difficult_ids},
      allQuestionsList = #{@all_ids},
      selectionStrategy = '#{@strategy}',
      answers = [],
      numberOfQuestions = #{@number_of_questions},
      currentQuestion = 1,
      nextQuestionLevel = '#{@first_attempt ? 'easy' : 'difficult'}',
      nextQuestionArray = #{@strategy == 'random' ? 'allQuestions' : (@first_attempt ? 'easy' : 'difficult')}List,
      progressBar = $('.progress-bar'),
      previousAnswerCorrect = true,
      startTime = #{Time.now.to_i};

  function updateProgressBar() {
    var percentage = (currentQuestion / numberOfQuestions * 100);
    progressBar.attr('aria-valuemax', numberOfQuestions);
    progressBar.attr('aria-valuenow', currentQuestion);
    progressBar.attr('style', 'width: ' + percentage + '%;');
    progressBar.text(currentQuestion + ' / ' + numberOfQuestions);
    progressBar.find('span').text(currentQuestion + ' of ' + numberOfQuestions);
  }

  function askQuestion(questionNumber) {
    updateProgressBar();
    $('.question').hide();
    $('#question_' + nextQuestionArray[questionNumber - 1]).fadeIn();
  }

  function logAnswer(questionId, answerId, difficultyLevel, isCorrect, answerArray) {
    answers[currentQuestion] = [questionId, answerId, difficultyLevel, isCorrect];
    // log the answer in the form
    $('#course_module_element_user_log_quiz_attempts_attributes_' + (currentQuestion - 1) + '_quiz_question_id').val(questionId);
    $('#course_module_element_user_log_quiz_attempts_attributes_' + (currentQuestion - 1) + '_quiz_answer_id').val(answerId);
    $('#course_module_element_user_log_quiz_attempts_attributes_' + (currentQuestion - 1) + '_answer_array').val(answerArray);

    // Avoid error in development mode where Mixpanel is turned off
    if (typeof mixpanel !== 'undefined') {
      mixpanel.track("Quiz Question Taken", {
        'Question ID': questionId,
        'Question Score': isCorrect,
        'Quiz Name': '#{@course_module_element.try(:name) || @course_module_jumbo_quiz.try(:name) || ""}',
        'Course Module': '#{@course_module.try(:name) || ""}',
        'Exam Section': '#{@course_module.try(:exam_section).try(:name) || ""}',
        'Course': '#{@course_module.try(:qualification).try(:name)} #{@course_module.try(:exam_level).try(:name)}'
      });
      mixpanel.people.increment("Questions Taken");
      if (true === isCorrect) {
        mixpanel.people.increment("Correctly Answered Questions");
      }
    }

    if (currentQuestion < numberOfQuestions) {
      if (selectionStrategy == 'progressive') {
        if (isCorrect == true && difficultyLevel == 'easy') {
          nextQuestionLevel = 'medium';
          nextQuestionArray = mediumList;
        } else if (isCorrect == true && difficultyLevel == 'medium') {
          nextQuestionLevel = 'difficult';
          nextQuestionArray = difficultList;
        } else if (isCorrect == false && previousAnswerCorrect == false && difficultyLevel == 'difficult') {
          nextQuestionLevel = 'medium';
          nextQuestionArray = mediumList;
        } else if (isCorrect == false && previousAnswerCorrect == false && difficultyLevel == 'medium') {
          nextQuestionLevel = 'easy';
          nextQuestionArray = easyList;
        }
      } else if (selectionStrategy == 'random') {
        nextQuestionArray = allQuestionsList
      }
      currentQuestion++;
      updateProgressBar();
      askQuestion(currentQuestion);
      previousAnswerCorrect = isCorrect;
    } else {
      $('#new_course_module_element_user_log').submit();
    }
  }

  var quizStartTime = new Date();
  $(document).on('ready page:load', function() {
    askQuestion(1); // 1 is the first question
    // Avoid error in development mode where Mixpanel is turned off
    if (typeof mixpanel !== 'undefined') {
      var questionsNo = #{@number_of_questions || 0};
      mixpanel.track("Quiz View Begin", {
        'Quiz Name': '#{@course_module_element.try(:name) || @course_module_jumbo_quiz.try(:name) || ""}',
        'Course Module': '#{@course_module.try(:name) || ""}',
        'Exam Section': '#{@course_module.try(:exam_section).try(:name) || ""}',
        'Course': '#{@course_module.try(:qualification).try(:name)} #{@course_module.try(:exam_level).try(:name)}',
        'Quiz Length': questionsNo,
        'Next CME': ['#{course_special_link(@course_module_element.try(:next_element))}', '#{@course_module_element.try(:next_element).try(:type_name)}']
      });
      mixpanel.people.increment("Quizes Viewed");
      mixpanel.people.increment("Questions Opened", questionsNo);
    }
  });

  window.onbeforeunload = function() {
    // Avoid error in development mode where Mixpanel is turned off
    if (typeof mixpanel !== 'undefined') {
      var timeViewed = +(((new Date() - quizStartTime) / 1000).toFixed(2));
      var questionsNo = #{@number_of_questions || 0};
      mixpanel.track("Quiz View End", {
        'Quiz Name': '#{@course_module_element.try(:name) || @course_module_jumbo_quiz.try(:name) || ""}',
        'Course Module': '#{@course_module.try(:name) || ""}',
        'Exam Section': '#{@course_module.try(:exam_section).try(:name) || ""}',
        'Course': '#{@course_module.try(:qualification).try(:name)} #{@course_module.try(:exam_level).try(:name)}',
        'Quiz Length': questionsNo,
        'Time Viewed': timeViewed,
        'Quiz Questions Completed': currentQuestion,
        'Quiz Score': +((currentQuestion / numberOfQuestions * 100).toFixed(2)),
        'Next CME': ['#{course_special_link(@course_module_element.try(:next_element))}', '#{@course_module_element.try(:next_element).try(:type_name)}']
      });
      mixpanel.people.increment("Quizzes Completed");
      mixpanel.people.increment("Total Time Viewing Quizzes", timeViewed);
      mixpanel.people.increment("Total Quiz Questions Completed", currentQuestion);
    }
  };
