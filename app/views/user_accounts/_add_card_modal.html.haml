#add-card-modal.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "add-card-modal", :role => "dialog", :tabindex => "-1"}
  .modal-dialog{:role => "document"}
    .modal-content.addCard
      %button.btn.btn-icon.modal-close{"data-dismiss" => "modal"}
        %i.material-icons{"aria-hidden" => "true"} close
      .modal-header.p-0
        %h3#add-card-modal.text-gray1.mb-5 Add New Card
      .modal-body.p-0
        =form_for(SubscriptionPaymentCard.new, method: :post, html: {class: 'py-0', role: 'form', id: 'new-subscription-payment-card-form'}, name: 'add_card_form') do |f|
          =f.hidden_field :user_id, value: current_user.id
          =f.hidden_field :stripe_token

          .row
            .col-sm-12
              .payment-errors
                .payment-errors
                  .form-group.cc
                    %label
                      Credit or Debit card
                    .clearfix
                      #card-element
                      #card-errors{role: 'alert'}


          .pt-2.d-flex.flex-wrap.flex-sm-nowrap.justify-content-end
            %div
              = f.button :submit, class: 'btn btn-primary float-left mb-2', onclick: "sendClickEventToSegment('clicks_profile_add_card', {userId: '#{@current_user&.id}',email: '#{@current_user&.email}',hasValidSubscription: '#{@current_user&.valid_subscription?}',isEmailVerified: '#{@current_user&.email_verified}',preferredExamBodyId: '#{@current_user&.preferred_exam_body_id}', isLoggedIn: '#{!@current_user&.nil?}', sessionId: '#{session&.id}', actionTaken: 'added'})", id: 'card_submit' do
                Add Card

              .sk-circle{style: 'margin-right: 50px; margin-left: 50px;'}
                .sk-circle1.sk-child
                .sk-circle2.sk-child
                .sk-circle3.sk-child
                .sk-circle4.sk-child
                .sk-circle5.sk-child
                .sk-circle6.sk-child
                .sk-circle7.sk-child
                .sk-circle8.sk-child
                .sk-circle9.sk-child
                .sk-circle10.sk-child
                .sk-circle11.sk-child
                .sk-circle12.sk-child

:javascript

  $(".sk-circle").hide();
  // Custom styling can be passed to options when creating an Element.
  var style = {
    base: {
      color: '#32325d',
      lineHeight: '18px',
      fontFamily: '"OakesGrotesk", "Helvetica Neue", Helvetica, sans-serif',
      fontSmoothing: 'antialiased',
      fontSize: '16px',
      '::placeholder': {
        color: '#aab7c4'
      }
    },
    invalid: {
      color: '#fa755a',
      iconColor: '#fa755a'
    }
  };

  var stripe = Stripe('#{ENV['LEARNSIGNAL_V3_STRIPE_PUBLIC_KEY']}');
  var elements = stripe.elements();

  var card = elements.create('card', {hidePostalCode: true, style: style});
  card.mount('#card-element');


  function stripeTokenHandler(token) {
    // Insert the token ID into the form so it gets submitted to the server
    var form = document.getElementById('new-subscription-payment-card-form');
    $('#subscription_payment_card_stripe_token').val(token.id);

    // Submit the form
    form.submit();
    $('#card_submit').hide();
  }

  function createToken() {
    stripe.createToken(card).then(function(result) {
      if (result.error) {
        // Inform the user if there was an error
        var errorElement = document.getElementById('card-errors');
        errorElement.textContent = result.error.message;
        $('#card_submit').prop('disabled',false);
        $('#card_submit').show();
        $(".sk-circle").hide();
      } else {
        // Send the token to your server
        stripeTokenHandler(result.token);
      }
    });
  };

  // Create a token when the form is submitted.
  var form = document.getElementById('new-subscription-payment-card-form');
  form.addEventListener('submit', function(e) {
    e.preventDefault();
    $('#card_submit').prop('disabled',true);
    $('#card_submit').hide();
    $(".sk-circle").show();

    createToken();
  });

  card.addEventListener('change', function(event) {
    var displayError = document.getElementById('card-errors');
    if (event.error) {
      displayError.textContent = event.error.message;
    } else {
      displayError.textContent = '';
    }
  });
