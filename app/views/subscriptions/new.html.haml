.upgrade
  #wrapper



    #upgrade-subscription
      =form_for @subscription, url: create_subscription_url(@subscription.user_id), html: { id: 'upgrade-form', role: 'form'} do |f|
        =render partial: 'layouts/error_messages', locals: {thing: @subscription, message: t('views.users.upgrade_subscription.error_panel_caption')}
        =f.hidden_field :user_id, value: @user.id
        =f.hidden_field :subscription_plan_id, value: @subscription_plans.last.id
        =f.hidden_field :stripe_token
        =f.hidden_field :use_paypal, value: false
        -if params[:coupon]
          =hidden_field_tag :hidden_coupon_code

        %section#plans
          .container

            %h2.title1
              =t('views.subscriptions.new_subscription.h2c')
            %h2.subtitle1
              =t('views.subscriptions.new_subscription.h2d')

            %ul.plans.clearfix
              -@subscription_plans.each do |plan|
                %li.plan{class: plan_interval(plan.payment_frequency_in_months), id: "sub-#{plan.currency.iso_code}-#{plan.payment_frequency_in_months}", data: {plan_id: plan.id, price: plan.currency.format_number(plan.price), interval: plan.payment_frequency_in_months}}
                  .base
                    .topbox
                      -if plan.payment_frequency_in_months == 3
                        %span
                          =t('views.subscriptions.new_subscription.h2d')
                    .box
                      .name
                        =t("views.general.payment_frequency_in_months.a#{plan.payment_frequency_in_months}")
                      %ul.details.fa-ul
                        %li
                          %i.fa-li.fa.fa-check
                          =t('views.subscriptions.new_subscription.get_unlimited_access')
                        %li
                          %i.fa-li.fa.fa-check
                          =t('views.subscriptions.new_subscription.cancel_anytime')
                        -#%li
                          %i.fa-li.fa.fa-check
                          =t("views.general.subscription_ideal_line.a#{plan.payment_frequency_in_months}")
                        -#%li
                          %i.fa-li.fa.fa-check
                          -# TODO Add plans free mock exams count here
                          =#'corrected mock exams'

                      .price
                        =plan.currency.format_number(plan.price)
                      -#unless plan.payment_frequency_in_months == 1
                        -# TODO change this display actual discount and saving values
                        .promo
                          .line1
                            18% OFF
                          .line2
                            Save €25
                    .lsbtn-base
                      -#%a.lsbtn{:href => "#"}
                        %i.fa.fa-check
                        Choose this plan
                      -# TODO change this to have no tick and then tick if selected
                      %label.lsbtn.plan-option
                        %input{id: 'chk-plan-' + plan.id.to_s, type: 'radio', class: 'option'}
                        =t('views.subscriptions.new_subscription.select_this_plan')

        %section#simply
          .container
            .row
              .col-lg-6
                %h2.title1
                  %i.fa.fa-book
                  Pick a plan

                .row.plan-options
                  .col-md-4
                    .plan-option
                      Monthly
                      %p
                        €33.99
                  .col-md-4
                    .plan-option
                      Quarterly
                      %p
                        €90.99
                  .col-md-4
                    .plan-option
                      Yearly
                      %p
                        €333.99

              .col-lg-6
                %h2.title1
                  Choose a way to pay

                .payment-options
                  .option
                    %i.fa.fa-credit-card
                    Credit / Debit Card
                    .pretty-radio.choose-payment-option
                      %input{ :type => "radio", :name => "payment_radio", :id => "select_card", :value => "stripe" }
                      %label{ :for => "select_card" }
                  %div{ :id => 'card_inputs', :class => 'checkout-form' }
                    =render partial: 'subscription_payment_cards/form', locals: {f: f}
                  .option
                    =link_to image_tag('https://www.paypalobjects.com/webstatic/en_US/i/buttons/PP_logo_h_200x51.png', height: 30), subscriptions_path(subscription: { user_id: @user.id, subscription_plan_id: @subscription_plans.last.id, use_paypal: true }), method: :post
                    .pretty-radio.choose-payment-option
                      %input{ :type => "radio", :name => "payment_radio", :id => "select_paypal", :value => "paypal" }
                      %label{ :for => "select_paypal" }
                  %div{ :id => 'paypal_inputs', :class => 'checkout-form' }
                    =render partial: 'subscription_payment_cards/paypal_form', locals: {f: f}


:javascript


  var couponCode = $('#coupon_code');
  var plan_id = '1';

  // UnChecks radio buttons except the one that was clicked.
  // Finds the id value of the sub plan that the radio button belongs to.
  // Sets the hidden field subscription_plan_id to that id.
  function choosePlan(theThing) {
    // $('.option[type="radio"]:checked').prop('checked', false);
    // $(theThing).find('.option[type="radio"]').prop('checked', true);
    $('#subscription_subscription_plan_id').val('37');
    // $('#total-value').text($(theThing).parent().parent().parent().attr('data-price'));
    //$('#next-payment-date').text($(theThing).parent().parent().parent().attr('data-interval'));
    plan_id = $('#subscription_subscription_plan_id').val();

    // Need to trigger Ajax call here if the coupon field already has a value
    if ($('#coupon_code').val()) {
      validateCoupon();
    }
  }


  // Trigger Ajax call on every input into the coupon field.
  // Ajax call params are the coupon field value and selected_plan_id
  // If response contains 'valid:true' add green border to field input
  // If response contains 'valid:false' add red border to field and show error text
  //
  //
  function validateCoupon() {

      if(!couponCode.value){
        $.ajax({
          url: '#{coupon_validation_path}',

          dataType: 'json',
          data: JSON.stringify({'coupon_code': couponCode.val(), 'plan_id': plan_id }),
          method: 'POST',
          contentType: "application/json; charset=utf-8",

          success: function(data,status,xhr){
            var validCoupon = data.valid;
            var discountedPrice = data.discounted_price;

            if(validCoupon === false){
              $('#coupon_code').removeClass("coupon-success");
              $('#coupon_code').addClass("coupon-error");
              $('.invalid-code').show();
              $('.discounted-price').hide();
              $('#total-value').removeClass('strike');

            } else if(validCoupon === true){
              $('#coupon_code').removeClass("coupon-error");
              $('#coupon_code').addClass("coupon-success");
              $('.invalid-code').hide();

              $('.discounted-price').show();
              $('#total-value').addClass('strike');
              $('#discounted-value').text(discountedPrice);

            } else {
              $('#coupon_code').removeClass("coupon-error");
              $('#coupon_code').removeClass("coupon-success");
              $('.invalid-code').hide();
            }



          },
          error: function(xhr,status,error){
            console.log(xhr);
            alert(error);
          }

        });

    } else  {
      couponCode.removeClass("coupon-error");
      couponCode.removeClass("coupon-success");
      couponCode.hide();
    }

  }

  $('#coupon_code').on('input',function(e) {
    validateCoupon();
  });

  // Hide green/red border and coupon error text if input has no value
  $('#coupon_code').blur(function() {
    if ($('#coupon_code').val() === '') {
      $('#coupon_code').removeClass("coupon-error");
      $('#coupon_code').removeClass("coupon-success");
      $('.invalid-code').hide();
    }
  });

  $(document).on('ready', function() {
    choosePlan($('.plan-option')[1]);
    $('.option').bind('click', function(event) {
      event.stopPropagation();
      choosePlan(this.parentElement);
    });

    $(".plan-option").bind('click', function(event) {
      event.preventDefault();
      choosePlan(this);
    });
    $(".sk-circle").hide();
    $('.invalid-code').hide();
    $('.discounted-price').hide();

    $('input[type=radio][name=payment_radio]').change(function() {
      if (this.value == 'stripe') {
        $('#card_inputs').slideDown();
        $('#paypal_inputs').slideUp();
        $('#subscription_use_paypal').val(false);
      }
      else if (this.value == 'paypal') {
        $('#card_inputs').slideUp();
        $('#paypal_inputs').slideDown();
        $('#subscription_use_paypal').val(true);
      }
    });
  })

  $('input[type="checkbox"]').on('change', function() {
    if($('#terms_and_conditions').prop('checked') == true) {
      $("#hidden_term_and_conditions").val('true');
    } else if($('#terms_and_conditions').prop('checked') == false) {
      $("#hidden_term_and_conditions").val('false');
    }
  });

  // Custom styling can be passed to options when creating an Element.
  var style = {
    base: {
      fontWeight: 300,
      fontFamily: 'Rubik',
      fontSize: '20px',
      lineHeight: '24px'
    }
  };

  var stripe = Stripe('#{ENV['LEARNSIGNAL_V3_STRIPE_PUBLIC_KEY']}');
  var elements = stripe.elements();

  var card = elements.create('card', {hidePostalCode: true, style: style});
  card.mount('#card-element');


  function stripeTokenHandler(token) {
    // Insert the token ID into the form so it gets submitted to the server
    var form = document.getElementById('upgrade-form');
    $('#subscription_stripe_token').val(token.id);
    $('#hidden_coupon_code').val($('#coupon_code').val());

    // Submit the form
    form.submit();
  }

  function createToken() {
    stripe.createToken(card).then(function(result) {
      if (result.error) {
        // Inform the user if there was an error
        var errorElement = document.getElementById('card-errors');
        errorElement.textContent = result.error.message;
        //Replace spinning JS with Submit button
        $('#card_submit').prop('disabled',false);
        $('#card_submit').show();
        $(".sk-circle").hide();

      } else {
        // Send the token to your server
        stripeTokenHandler(result.token);
      }
    });
  };

  // Create a token when the form is submitted.
  var form = document.getElementById('upgrade-form');
  form.addEventListener('submit', function(e) {
    e.preventDefault();
    //Replace submit button with spinning JS
    $('#card_submit').prop('disabled',true);
    $('#card_submit').hide();
    $('#paypal_submit').prop('disabled',true);
    $(".sk-circle").show();
    if ($('#subscription_use_paypal').val()) {
      document.getElementById('upgrade-form').submit();
    } else {
      createToken();
    }
  });



  card.addEventListener('change', function(event) {
    var displayError = document.getElementById('card-errors');
    if (event.error) {
      displayError.textContent = event.error.message;
    } else {
      displayError.textContent = '';
    }
  });


