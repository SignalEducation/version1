%main.subscriptionPageWrapper
  .subscriptionPageWrapper-header.navbar.navbar-expand-lg
    .container.p-0.d-flex.align-items-center.justify-content-start
      =link_to pricing_url(current_user&.preferred_exam_body&.group&.name_url), class: 'main-header-backBtn' do
        .i.material-icons{:style => "font-size: 20px;margin-right: 12px;margin-top: 6px;"} arrow_back
      .main-header-content
        .container.subscriptionPageWrapper-logo.hidden-xs
          =link_to pricing_url(current_user&.preferred_exam_body&.group&.name_url), class: 'navbar-brand logo' do
            =image_tag('Learnsignal-Logo.svg', class: 'logo-img', alt: "LearnSignal Logo")
        -if @plans && @plans.first
          %div.header-title-lesson.visible-xs
            = "#{@plans.first.exam_body.name} Subscription"
        -else
          %div.header-title-lesson.visible-xs
            = 'Subscription'
      #navbarNavDropdown.collapse.navbar-collapse.justify-content-end
        %ul.navbar-nav.align-items-lg-center
          -if current_user
            %li.nav-item.dropdown
              %a#navbarDropdown.navbar-login.dropdown-toggle{"aria-expanded" => "false", "aria-haspopup" => "true", "data-toggle" => "dropdown", :href => "#", :role => "button"}
                .nav-login-box
                  %span.navbar-login-userName
                    =current_user.first_name.to_s
                    =current_user.last_name.to_s
                    %span.navbar-login-userEmail
                      =current_user.email
              .dropdown-menu.dropdown-menu-right{"aria-labelledby" => "navbarDropdown"}
                =link_to t('views.users.show.h1'), account_url, class: 'nav-link dropdown-item'
                =link_to t('views.general.log_out'), sign_out_url, class: 'nav-link dropdown-item logout'

          -else
            %li.nav-item.w-100.text-center.py-2
              =link_to 'Login', sign_in_url, {class: 'nav-link'}
            %li.nav-item.w-100.text-center.py-2
              =link_to new_student_url, class: 'btn btn-primary nav-link px-4' do
                %span Register



  %article.subscriptionPageWrapper-coreWrapper.container
    %section.pb-2#wrapper
      #upgrade-subscription
        =form_for @subscription, url: subscriptions_path, html: { id: 'upgrade-form', role: 'form' } do |f|
          =render partial: 'layouts/error_messages', locals: { thing: @subscription, message: t('views.users.upgrade_subscription.error_panel_caption') }
          =f.hidden_field :user_id, value: current_user.id
          =f.hidden_field :subscription_plan_id, value: @subscription.subscription_plan_id
          =f.hidden_field :completion_guid
          =f.hidden_field :stripe_token
          =f.hidden_field :use_paypal, value: false
          =f.hidden_field :kind, value: @kind
          =f.hidden_field :coupon_id, value: nil
          =hidden_field_tag :discounted_price
          =hidden_field_tag :hidden_coupon_code

          %div
            .container
              -if flash[:success] || flash[:error] || flash[:warning]
                .row.subscription-flash
                  .col-xs-12
                    =render partial: 'layouts/flash_messages'

            .container.p-0
              .subscriptionPageWrapper-infoBox
                .subscriptionPageWrapper-detailsBox
                  %header.mb-4.hidden-xs
                    -if @plans && @plans.first
                      %h1.purchaseTitle.mb-2.text-left
                        = "#{@plans.first.exam_body.name} Tuition Payment"
                      %p.p-hero.px-lg-12.text-left
                        =@plans.first.checkout_sub_heading
                    -else
                      %h1.purchaseTitle.mb-2.text-left
                        = 'Exam Tuition Payment'
                      %p.p-hero.px-lg-12.text-left
                        ='Achieve your learning goals with a learnsignal subscription plan and enjoy professional courses delivered online so that you can study on a schedule that suits you.'
                  %fieldset{id: 'plans-options' }
                    %legend.sr-only Select a Plan
                    -# subscriptions helper
                    =plans_partials(params, @subscription, @plans)
                .subscriptionPageWrapper-optionsBox
                  %fieldset.card.card-payments.m-0
                    .wholeTabs
                      .subscriptionPageWrapper-optionsBox-optionTabs
                        .subscriptionPageWrapper-optionsBox-optionTabs-Tab.active.js-option-wrapper-stripe
                          .custom-control.custom-radio
                            %input#pay-with-card.custom-control-input.style-radio{ name: 'payment-options', type: 'radio', value: 'stripe', checked: true }
                            %label.tab-label{ for: 'pay-with-card' }
                              %span.custom-label-info
                                %span.m-0
                                  -# =image_tag('ico-card.svg', alt: 'Credit Card Icon', class: 'logo-icon mr-1')
                                  %span Credit / Debit Card
                        .subscriptionPageWrapper-optionsBox-optionTabs-Tab.js-option-wrapper-paypal
                          .custom-control.custom-radio
                            %input#pay-with-paypal.custom-control-input.style-radio{name: 'payment-options', type: 'radio', value: 'paypal'}
                            %label.tab-label{for: 'pay-with-paypal'}
                              %span.custom-label-info
                                %span.0.m-0
                                  =image_tag('ico-paypal.svg', alt: 'PayPal Logo', class: 'logo-icon mr-1')
                                  %span PayPal

                    .subscriptionPageWrapper-paymentOptionsWrapper
                      .subscriptionPageWrapper-paymentOptionsWrapper-optionForm.js-option-wrapper-stripe
                        .subscriptionPageWrapper-paymentOptionsWrapper-header
                          %span Pay with Card
                        =render partial: 'subscription_payment_cards/form', locals: {f: f}
                        
                      .subscriptionPageWrapper-paymentOptionsWrapper-optionForm.js-option-wrapper-paypal
                        .subscriptionPageWrapper-paymentOptionsWrapper-header
                          %span Pay with PayPal
                        =render partial: 'subscription_payment_cards/paypal_form', locals: {f: f}
                        

                    

    
    .subscriptionPageWrapper-notesBox
      -if is_plan_single_checkout(params, @subscription, @plans)
        - yearly_plan = @plans.yearly.first
        - if yearly_plan&.previous_plan_price&.present? && yearly_plan.previous_plan_price > 0
          %p.mb-2.price
            ='Currently we are offering a discount off the Annual Plan. Original Price '
            %span
              =yearly_plan.currency.format_number(yearly_plan.previous_plan_price)

        %div.alert-secondary.mb-2
          %span.font-weight-medium Note: 
          %br
          You are subscribing to a recurring payment which will continue until you cancel your subscription. 
          %br
          You can cancel your subscription at anytime.
      - else
        %div.alert-secondary.mb-2
          %span.font-weight-medium Note:
          You are subscribing to a recurring payment which will continue until you cancel your subscription. You can cancel your subscription at anytime.  

:javascript
  let plan_id = '1';
  let searchParams = new URLSearchParams(window.location.search);
  let preSelectedPlan = $("input[name='plans']:checked");
  let planNames = [];
  let planElements = $("input[name='plans']");
  planElements.each(function(){ planNames.push(this.id); });
  let banner = "#{@banner.present?.to_s}";
  let preferredExamBodyId = "#{current_user&.preferred_exam_body_id}";
  let preferredExamBody = "#{current_user&.preferred_exam_body&.name}";
  let onboarding = "#{current_user&.analytics_onboarding_valid?.to_s}";

  let analyticsData = { preferred_exam_body_id: preferredExamBodyId, preferred_exam_body: preferredExamBody, banner: banner, onboarding: onboarding, exam_body_id: "#{@exam_body&.id}", exam_body_name: "#{@exam_body&.name}",
    subscription_plan_options: "#{@plans.map(&:id)}", sub_plan_names: planNames, selected_sub_plan_guid: "#{params[:plan_guid]}", selected_sub_plan_name: preSelectedPlan.attr('data-name'), selected_sub_plan_price: preSelectedPlan.attr('data-price'),
    currency: "#{@currency&.iso_code}", country: "#{current_user&.country&.name}", valid_coupon_present: $('#coupon_code').hasClass("coupon-success"), discountedPrice: '', couponCode: '' };

  function addToCart() {
    let selectedPlan = $("input[name='plans']:checked");
    let planData = {preferred_exam_body_id: preferredExamBodyId, preferred_exam_body: preferredExamBody, banner: banner, onboarding: onboarding, exam_body_id: "#{@exam_body&.id}", exam_body_name: "#{@exam_body&.name}",
     subscription_plan_options: "#{@plans.map(&:id)}", sub_plan_names: planNames, selected_sub_plan_guid: selectedPlan.attr('data-guid'), selected_sub_plan_name: selectedPlan.attr('data-name'),
      selected_sub_plan_price: selectedPlan.attr('data-price'), currency: "#{@currency&.iso_code}", country: "#{current_user&.country&.name}", valid_coupon_present: $('#coupon_code').hasClass("coupon-success")};
    planOptionSelect(planData);

    fbq('track', 'AddToCart', {
      value: selectedPlan.attr('data-price'),
      currency: "#{@subscription&.subscription_plan&.currency&.iso_code}",
      name: "#{@subscription&.subscription_plan&.name}",
      brand:  "#{@subscription&.subscription_plan&.exam_body&.name}",
      subscription_interval: "#{@subscription&.subscription_plan&.interval_name}",
      content_category: 'Subscription'
    });

    window.uetq = window.uetq || [];
    window.uetq.push('event', 'AddToCart', {
      'event_category': 'Subscription',
      'event_label': '#{@subscription&.subscription_plan&.exam_body&.name}',
      'event_value': selectedPlan.attr('data-price')
    });
  }

  function intervalSummary(frequency) {
    switch (frequency) {
      case '1':
        return 'Billed every month';
      case '3':
        return 'Billed every 3 months';
      case '12':
        return 'Billed every 12 months';
      default:
        return 'Billed every month';
    }
  }

  function choosePlan(selectedPlan, pageLoad) {
    $('#subscription_subscription_plan_id').val(selectedPlan);
    updateCheckoutTotal();
    plan_id = selectedPlan;
    if (pageLoad === false) {
      addToCart();
    }
  }

  function updateCheckoutTotal() {
    var selectedPlan = $("input[name='plans']:checked");

    $('.payment-details span.value').text($(selectedPlan).attr('data-price'));
    $('.payment-details p.billing-summary').text(intervalSummary($(selectedPlan).attr('data-frequency')));
  }

  function initializePlan() {
    var selectedPlan = $("input[name='plans']:checked").val();
    choosePlan(selectedPlan, true);
  }

  $(document).on('ready', function() {
    initializePlan();

    $('input[type=radio][name=plans]').bind('change', function(event) {
      event.preventDefault();
      validateCoupon();
      choosePlan($(this).val(), false);
    });
    $(".spinning-loading").hide();
    $('.invalid-code').hide();
    $('.discounted-price').hide();

    $('.js-option-wrapper-stripe').addClass('active');
    // $('#pay-with-card').closest('.custom-control').siblings('.payment-details').slideDown();
    // $('#pay-with-paypal').closest('.custom-control').siblings('.payment-details').slideUp();
    selectPaymentMethod($('.subscriptionPageWrapper-optionsBox-optionTabs').val(), false);

    $('.subscriptionPageWrapper-optionsBox-optionTabs').on('change', '.custom-control-input[type="radio"][name="payment-options"]', function() {
      $(this).closest('.card').find('.custom-control-input[type="radio"]').closest('.custom-control').siblings('.payment-details').slideUp();
      if ($(this).is(':checked')) {
        if ($(this).val() == 'stripe') {
          $('.js-option-wrapper-paypal').removeClass('active');
          $('.js-option-wrapper-stripe').addClass('active');
        } else {
          $('.js-option-wrapper-paypal').addClass('active');
          $('.js-option-wrapper-stripe').removeClass('active');

        }
        $(this).closest('.custom-control').siblings('.payment-details').slideDown();
        selectPaymentMethod($(this).val(), true);
      }
    });

    $('#all-plans').collapse({
      toggle: false
    });

    $('#all-plans').on('show.bs.collapse', function() {
      $('.js-show-more-plans').addClass('disabled');
    });
    $('#all-plans').on('shown.bs.collapse', function() {
      $('.js-show-more-plans').on('click', function() {
        return false;
      });
    });

    function selectPaymentMethod(paymentType, click) {
      if (click === true) {
        providerOptionSelect(analyticsData, paymentType);
      }
      switch(paymentType) {
        case 'paypal':
          $('#subscription_use_paypal').val(true);
          break;
        case 'stripe':
          $('#subscription_use_paypal').val(false);
          break;
        default:
          $('#subscription_use_paypal').val(false);
      }
    }

    // Custom styling can be passed to options when creating an Element.
    var style = {
      base: {
        color: '#32325d',
        lineHeight: '18px',
        fontFamily: '"Manrope", sans-serif',
        fontSmoothing: 'antialiased',
        fontSize: '16px',
        fontWeight: '500',
        '::placeholder': {
          color: '#9CA3AF'
        }
      },
      invalid: {
        color: '#fd5c63',
        iconColor: '#fd5c63',
        fontWeight: '500',
      }
    };

    var stripe       = Stripe('#{ENV['LEARNSIGNAL_V3_STRIPE_PUBLIC_KEY']}');
    var elements     = stripe.elements();
    var displayError = document.getElementById('card-errors');
    var cardElement  = elements.create('card', { hidePostalCode: true, style: style });

    cardElement.mount('#card-element');

    cardElement.addEventListener('change', function(event) {
      if (event.error) {
        resetForm(event.error.message);
      } else {
        displayError.textContent = '';
      }
    });

    cardElement.on('focus', function() {
      stripeFormFocus(analyticsData);
    });

    var paypalButton = document.getElementById('paypal_submit');

    paypalButton.addEventListener('click', function(ev) {
      paypalSubmit(analyticsData);
      $('#plans-options').prop('disabled', true);
      $('#card_submit').prop('disabled', true);
      $('#paypal_submit').prop('disabled', true);
      $('#card_submit').hide();
      $('#paypal_submit').hide();
      $(".spinning-loading").show();
      $('#hidden_coupon_code').val();
      document.getElementById('upgrade-form').submit();
    });

    var cardButton = document.getElementById('card_submit');

    cardButton.addEventListener('click', function(ev) {
      event.preventDefault();

      //Replace submit button with spinning JS
      $('#plans-options').prop('disabled', true);
      $('#card_submit').prop('disabled', true);
      $('#paypal_submit').prop('disabled', true);
      $('#card_submit').hide();
      $('#paypal_submit').hide();
      $(".spinner-message").html("Please wait...");
      $(".spinning-loading").show();
      $('#hidden_coupon_code').val($('#coupon_code').val());
      stripeSubmit(analyticsData);

      if ($('#subscription_use_paypal').val() === 'true') {
        document.getElementById('upgrade-form').submit();
      } else {
        stripe.createToken(cardElement).then(function(result) {
          if (result.error) {
            resetForm(result.error.message);
          } else {
            createSubscription(result.token);
          }
        });
      }
    });

    function createSubscription(token){
      $('#subscription_stripe_token').val(token.id);

      var form = $('#upgrade-form');

      $.ajax({
        type: $(form).attr('method'),
        url: $(form).attr('action'),
        data: $(form).serialize(),
        dataType: 'json',
        success: function(data, status, xhr){
          if(data.status == 'incomplete'){
            handlePayment(data.client_secret, data.subscription_id)
          } else if(data.status == 'active'){
            window.location.replace("#{personal_upgrade_complete_url(@subscription.completion_guid)}");
          }
        },
        error: function(request, status, error){
          if (request.status === 500) {
            resetForm('Something went wrong. Please try again.');
          } else {
            resetForm(request.responseJSON.error);
          }
        }
      });
    }

    function handlePayment(client_secret, subscription_id){
      let statusArray = ['active', 'succeeded'];
      let intentStatus = '';

      $(".spinner-message").html("Still processing...");

      stripe.handleCardPayment(client_secret, cardElement).then(function(result) {
        if (result.error) {
          resetForm(result.error.message);
          intentStatus = 'pending';
          $.ajax({
            type: 'post',
            url: "/subscriptions/" + subscription_id + "/expire_incomplete",
            data: { },
            dataType: 'json'
          });
        } else {
          intentStatus = result['paymentIntent']['status'];
          $.ajax({
            type: 'post',
            url: "/subscriptions/" + subscription_id + "/status_from_stripe",
            data: { status: intentStatus },
            dataType: 'json',
            success: function(data,status,xhr){
              if( $.inArray(intentStatus, statusArray) !== -1){
                window.location.replace("#{personal_upgrade_complete_url(@subscription.completion_guid)}");
              }
            },
            error: function(xhr,status,error){
              resetForm(error);
            }
          });
        }
      });
    }

    function resetForm(error){
      $('#card_submit').show();
      $('#plans-options').prop('disabled', false);
      $('#paypal_submit').show();
      $('.custom-check').prop('disabled', false);
      $('#card_submit').prop('disabled', false);
      $('#paypal_submit').prop('disabled', false);
      $(".spinning-loading").hide();

      displayError.textContent = error;
    }


    let banner = "#{@banner.present?.to_s}";
    let preferredExamBodyId = "#{current_user&.preferred_exam_body_id}";
    let preferredExamBody = "#{current_user&.preferred_exam_body&.name}";
    let onboarding = "#{current_user&.analytics_onboarding_valid?.to_s}";
    let coupon_code = $('#coupon_code').val();
    let discounted_price = Number($('#discounted_price').val().replace(/[^0-9\.-]+/g,""));

    // Segment Analytics
    analytics.page('Payment', {
      preferredExamBodyId: preferredExamBodyId,
      preferredExamBody:preferredExamBody ,
      banner: banner,
      onboarding: onboarding,
      examBodyId: "#{@exam_body&.id}",
      examBodyName: "#{@exam_body&.name}",
      currency: "#{@currency&.iso_code}",
      country: "#{current_user&.country&.name}",
      subscriptionPlanOptions: "#{@plans.map(&:id)}",
      subPlanNames: planNames,
      subPlanGuid: "#{params[:plan_guid]}",
      selectedSubPlanName: preSelectedPlan.attr('data-name'),
      selectedSubPlanPrice: preSelectedPlan.attr('data-price'),
      selectedSubPlanGuid: preSelectedPlan.attr('data-guid'),
      subscriptionType: "#{@kind.to_s}",
      paymentType: "Subscription",
      discountedPrice: (discounted_price) ? discounted_price : '',
      couponCode: coupon_code
    });

    $("#show_all_plans").on( "click", function() {
      showAllPlans(analyticsData);
    });

  })
