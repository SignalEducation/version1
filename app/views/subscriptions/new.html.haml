.upgrade
  #wrapper
    #upgrade-subscription
      =form_for @subscription, url: create_subscription_url(@subscription.user_id), html: { id: 'upgrade-form', role: 'form'} do |f|
        =render partial: 'layouts/error_messages', locals: {thing: @subscription, message: t('views.users.upgrade_subscription.error_panel_caption')}
        =f.hidden_field :user_id, value: current_user.id
        =f.hidden_field :subscription_plan_id, value: @subscription.subscription_plan_id
        =f.hidden_field :stripe_token
        =f.hidden_field :use_paypal, value: false
        -if params[:coupon]
          =hidden_field_tag :hidden_coupon_code

        .bg-asphalt
          .container
            -if flash[:success] || flash[:error] || flash[:warning]
              .row.subscription-flash
                .col-xs-12
                  =render partial: 'layouts/flash_messages'
            .hero
              %h5.text-red Upgrade Your Account
              %h1.h1-mega Select one of our plans
              %p.text-lg.mb-0 Get started on your ACCA journey in less than 5 minutes. Passing your exam is worth it.
              %p.text-lg People learn in different ways. Whatever way you want to learn, we've got you covered.
          .container.payment
            .row
              .col-lg-6.mb-5.mb-xl-0
                %fieldset
                  %legend.sr-only Select a Plan
                  -@subscription_plans.each do |plan|
                    .form-group
                      .custom-control.custom-radio
                        %input.custom-control-input.custom-control-input-card.style-checkbox{:id => plan.interval_name.downcase, :name => "plans", :type => "radio", :data => {:price => plan.price, :frequency => plan.payment_frequency_in_months}, :value => plan.id, :checked => ("checked" if @subscription.subscription_plan_id == plan.id)}
                        %label.custom-control-label{:for => plan.interval_name.downcase}
                          %span.custom-label-info
                            %span.h3.m-0
                              %span
                                =plan.interval_name
                            - if plan.monthly_percentage_off.present?
                              %span.discount
                                %span.text-with-bg.bg-torquoise4
                                  ="#{plan.monthly_percentage_off}%"
                                off monthly price
                          %span.custom-label-amount
                            %span.text-purple5.text-xl
                              =plan.currency.format_number(plan.price)
                            %span.p
                              ="Billed every #{plan.payment_frequency_in_months > 1 ? pluralize(plan.payment_frequency_in_months, 'month') : 'month'}"
                          %span.custom-check
                            / custom checkbox

              .col-lg-6
                %fieldset.card
                  %p.h2.mb-1 Choose a way to pay
                  %p.mb-4 Choose your preferred method of payment
                  .form-group.form-group-expandable
                    .custom-control.custom-radio
                      %input#pay-with-card.custom-control-input.style-radio{:name => "payment-options", :type => "radio"}
                      %label.custom-control-label{:for => "pay-with-card"}
                        %span.custom-label-info
                          %span.h3.m-0
                            =image_tag('ico-card.svg', :alt => "Credit Card Icon", :class => 'logo-icon.mr-2.mr-sm-3')
                            %span Credit / Debit Card
                        %span.custom-check
                          / custom checkbox
                    =render partial: 'subscription_payment_cards/form', locals: {f: f}
                  .form-group.form-group-expandable
                    .custom-control.custom-radio
                      %input#pay-with-paypal.custom-control-input.style-radio{:name => "payment-options", :type => "radio"}
                      %label.custom-control-label{:for => "pay-with-paypal"}
                        %span.custom-label-info
                          %span.h3.m-0
                            =image_tag('ico-paypal.svg', :alt => "PayPal Logo", :class => 'logo-icon.mr-2.mr-sm-3')
                            %span PayPal
                        %span.custom-check
                          / custom checkbox
                    .payment-details.pay-pal
                      .mb-2
                        %h4.m-0
                          Total:
                          %span.value#paypal-total-value
                        %p.billing-summary Billed every month
                      .text-center
                        %input.btn.btn-img.mb-4{:alt => "PayPal Dummy Button", :src => "https://www.paypalobjects.com/webstatic/en_US/i/buttons/checkout-logo-large.png", :type => "image"}/
                      %small
                        %span.font-weight-medium Note
                        You are subscribing to a recurring payment which will continue until you cancel your subscription. Remember, you can cancel anytime.

        .bg-white
          .container
            .py-6
              %h2.mb-5 Included in Your LearnSignal Membership
              .row
                .col-md-5
                  .with-icon-checked
                    %p Topic&ndash;by&ndash;topic, online 15&ndash;minute lectures
                  .with-icon-checked
                    %p Notes &amp; MCQs
                  .with-icon-checked
                    %p Practice CBE's
                .col-md-5
                  .with-icon-checked
                    %p 24&#47;7 hour Support
                  .with-icon-checked
                    %p Exam Bootcamp
                  .with-icon-checked
                    %p Webinar Week


:javascript

  var couponCode = $('#coupon_code');
  var plan_id = '1';

  function intervalSummary(frequency) {
    switch (frequency) {
      case '1':
        return 'Billed every month';
      case '3':
        return 'Billed every 3 months';
      case '12':
        return 'Billed every 12 months';
      default:
        return 'Billed every month';
    }
  }

  function choosePlan(selectedPlan) {
    console.log(selectedPlan);
    // var preChosen = $("input[name='plans']:checked").val();
    // var preChosen = $('.plan-select').find('div.chosen');
    // if (preChosen) {
    //   preChosen.removeClass('chosen');
    //   $(selectedPlan).addClass('chosen');
    // }

    // console.log(preChosen);
    $('#subscription_subscription_plan_id').val(selectedPlan);

    updateCheckoutTotal();

    // plan_id = $('#subscription_subscription_plan_id').val();

    // Need to trigger Ajax call here if the coupon field already has a value
    if ($('#coupon_code').val()) {
      validateCoupon();
    }
  }


  // Trigger Ajax call on every input into the coupon field.
  // Ajax call params are the coupon field value and selected_plan_id
  // If response contains 'valid:true' add green border to field input
  // If response contains 'valid:false' add red border to field and show error text
  //
  //
  function validateCoupon() {

      if(!couponCode.value){
        $.ajax({
          url: '#{coupon_validation_path}',

          dataType: 'json',
          data: JSON.stringify({'coupon_code': couponCode.val(), 'plan_id': plan_id }),
          method: 'POST',
          contentType: "application/json; charset=utf-8",

          success: function(data,status,xhr){
            var validCoupon = data.valid;
            var discountedPrice = data.discounted_price;

            if(validCoupon === false){
              $('#coupon_code').removeClass("coupon-success");
              $('#coupon_code').addClass("coupon-error");
              $('.invalid-code').show();
              $('.discounted-price').hide();
              $('#total-value').removeClass('strike');

            } else if(validCoupon === true){
              $('#coupon_code').removeClass("coupon-error");
              $('#coupon_code').addClass("coupon-success");
              $('.invalid-code').hide();

              $('.discounted-price').show();
              $('#total-value').addClass('strike');
              $('#discounted-value').text(discountedPrice);

            } else {
              $('#coupon_code').removeClass("coupon-error");
              $('#coupon_code').removeClass("coupon-success");
              $('.invalid-code').hide();
            }



          },
          error: function(xhr,status,error){
            console.log(xhr);
            alert(error);
          }

        });

    } else  {
      couponCode.removeClass("coupon-error");
      couponCode.removeClass("coupon-success");
      couponCode.hide();
    }

  }

  $('#coupon_code').on('input',function(e) {
    validateCoupon();
  });

  // Hide green/red border and coupon error text if input has no value
  $('#coupon_code').blur(function() {
    if ($('#coupon_code').val() === '') {
      $('#coupon_code').removeClass("coupon-error");
      $('#coupon_code').removeClass("coupon-success");
      $('.invalid-code').hide();
    }
  });

  function updateCheckoutTotal() {
    var selectedPlan = $("input[name='plans']:checked");
    console.log(selectedPlan);
    console.log($(selectedPlan).attr('data-price'));

    $('.payment-details span.value').text($(selectedPlan).attr('data-price'));
    $('.payment-details p.billing-summary').text(intervalSummary($(selectedPlan).attr('data-frequency')));
  }

  function initializePlan() {
    var selectedPlan = $("input[name='plans']:checked").val();
    choosePlan(selectedPlan);
  }

  $(document).on('ready', function() {
    initializePlan();
    $('input[type=radio][name=plans]').bind('change', function(event) {
      event.preventDefault();
      choosePlan($(this).val());
    });
    $(".sk-circle").hide();
    $('.invalid-code').hide();
    $('.discounted-price').hide();

    // Bojan Stuff
    $('.form-group-expandable').on('change', '.custom-control-input[type="radio"]', function() {
      $(this).closest('.card').find('.custom-control-input[type="radio"]').closest('.custom-control').siblings('.payment-details').slideUp();
      if ($(this).is(':checked')) {
        $(this).closest('.custom-control').siblings('.payment-details').slideDown();
      }
    });
    $('.form-group-expandable .custom-control-input[type="radio"]:checked').closest('.custom-control').siblings('.payment-details').show();


    $('#all-plans').collapse({
      toggle: false
    });

    $('#all-plans').on('show.bs.collapse', function() {
      $('.js-show-more-plans').addClass('disabled');
    });
    $('#all-plans').on('shown.bs.collapse', function() {
      $('.js-show-more-plans').on('click', function() {
        return false;
      });
    });

    $('#stripe_option').on('click', function() {
      selectSripe();
    })

    $('#paypal_option').on('click', function() {
      selectPaypal();
    });

    // Custom styling can be passed to options when creating an Element.
    var style = {
      base: {
        fontWeight: 300,
        fontFamily: "Rubik, HelveticaNeue",
        fontSize: '20px',
        lineHeight: '24px'
      }
    };

    var stripe = Stripe('#{ENV['LEARNSIGNAL_V3_STRIPE_PUBLIC_KEY']}');
    var elements = stripe.elements();

    var card = elements.create('card', {hidePostalCode: true, style: style});
    card.mount('#card-element');

    // Create a token when the form is submitted.
    var form = document.getElementById('upgrade-form');
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      //Replace submit button with spinning JS
      $('#card_submit').prop('disabled',true);
      $('#card_submit').hide();
      $('#paypal_submit').prop('disabled',true);
      $(".sk-circle").show();
      if ($('#subscription_use_paypal').val() === 'true') {
        document.getElementById('upgrade-form').submit();
      } else {
        createToken();
      }
    });

    card.addEventListener('change', function(event) {
      var displayError = document.getElementById('card-errors');
      if (event.error) {
        displayError.textContent = event.error.message;
      } else {
        displayError.textContent = '';
      }
    });
  })

  function stripeTokenHandler(token) {
    // Insert the token ID into the form so it gets submitted to the server
    var form = document.getElementById('upgrade-form');
    $('#subscription_stripe_token').val(token.id);
    $('#hidden_coupon_code').val($('#coupon_code').val());

    // Submit the form
    form.submit();
  }

  function createToken() {
    stripe.createToken(card).then(function(result) {
      if (result.error) {
        // Inform the user if there was an error
        var errorElement = document.getElementById('card-errors');
        errorElement.textContent = result.error.message;
        //Replace spinning JS with Submit button
        $('#card_submit').prop('disabled',false);
        $('#card_submit').show();
        $(".sk-circle").hide();

      } else {
        // Send the token to your server
        stripeTokenHandler(result.token);
      }
    });
  };


