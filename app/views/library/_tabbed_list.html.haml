-# -binding.pry
%div.container.d-flex.libraryGroupWrapper-list.pt-4.pb-4
  %nav.levels-nav
    %ul.d-flex.flex-column.nav.nav-pills.nav-fill{id: 'levelsTabs', role: 'tablist'}
      - @levels.each_with_index do |level, counter|
        %li.nav-item{data: {tab_name: level.name, group_name: @group.name}, onclick: "sendClickEventToSegment('selects_levels_exams', {userId: '#{@current_user&.id}',email: '#{@current_user&.email}',hasValidSubscription: '#{@current_user&.valid_subscription?}',isEmailVerified: '#{@current_user&.email_verified}',preferredExamBodyId: '#{@current_user&.preferred_exam_body_id}', isLoggedIn: '#{!@current_user&.nil?}', sessionId: '#{session&.id}', programName: '#{@group.name}', levelName: '#{level.name}'})"}
          %a{class: "nav-link #{counter == 0 ? 'active' : ''}", id: "#{level.name_url}-tab", data: {toggle: 'tab'}, href: "##{level.name_url}", aria: {controls: "#{level.name_url}", selected: 'false'}, role: 'tab'}
            =level.name

  %section.container.content-section
    %h2.sr-only List of Courses
    #levelsTabsContent.tab-content
      -@levels.each_with_index do |level, counter|
        .tab-pane{id: level.name_url, class: "tab-#{level.name_url} #{counter == 0 ? 'active show' : ''} ", "aria-labelledby" => "#{level.name_url}-tab", :role => "tabpanel"}
          -if @group.name_url == 'cpd'
            -level_units_hours = level.courses.all_active.map(&:unit_hour_label)&.uniq.compact&.sort
            -key_areas = level.key_areas.all_active&.sort.select { |k|  k.courses.all_active.present? }

            .row.row-lge
              .col-sm
                .filter-tabbed-card
                  .search-container
                    =form_tag(courses_search_url, method: :post, role: 'form', class: 'form-inline', remote: true) do
                      -if level.track == false
                        .filter-label-select-row.filter-width-full.filter-select-top-row
                          .filter-label-select-col.filter-select-key-area-ext
                            =label_tag(:key_area_id, 'Choose Key Area', class: 'filter-select-label filter-select-label-top')
                            =select_tag(:key_area_id, options_for_select(key_areas.map{ |k| [k.name, k.id] }.sort), include_blank: 'All', onchange: " updateKeyAreasSelect(#{level.id}); jQuery(this).parent().trigger('submit');", class: 'form-control filter-select-key-area')
                          .filter-label-select-col.filter-width-half
                            %label.filter-label-container
                              .filter-select-dot
                                .filter-inner-dot
                              %span.filter-select-label
                                Choose Units/Hours
                            =select_tag(:units, options_for_select( level_units_hours.map{ |u| [t('models.course.hour_unit', count: u), u] }), id: "#{level.id}-units-select", include_blank: 'All', onchange: "onUnitSelect(); jQuery(this).parent().trigger('submit')", class: 'form-control filter-select-opts')
                      -else
                        .filter-label-select-row.filter-row-wrap.filter-width-full
                          .filter-label-select-col.filter-width-half
                            %label.filter-label-container
                              .filter-select-dot
                                .filter-inner-dot
                              %span.filter-select-label
                                Choose Units/Hours
                            =select_tag(:units, options_for_select( level_units_hours.map{ |u| [t('models.course.hour_unit', count: u), u] }), id: "#{level.id}-units-select", include_blank: 'All', onchange: "onUnitSelect(); jQuery(this).parent().trigger('submit')", class: 'form-control filter-select-opts')
                      =hidden_field_tag :level_id, level.id

          .row.row-lge{id: "#{level.id}-tabbed-courses-list"}
            =render partial: 'tabbed_courses_list', locals: { courses: level.courses.all_active.all_in_order, level_name: level.name }

:javascript
  function onUnitSelect() {
     let units_hours_select =  event.target.value;
    sendClickEventToSegment('selects_units_dropdown', {
      userId: '#{current_user&.id}',
      email: '#{current_user&.email}',
      hasValidSubscription: '#{current_user&.valid_subscription?}',
      isEmailVerified: '#{current_user&.email_verified}',
      preferredExamBodyId: '#{current_user&.preferred_exam_body_id}',
      isLoggedIn: '#{!current_user&.nil?}',
      sessionId: '#{session&.id}',
      programName: '#{@group&.name}',
      value: units_hours_select
    })
  }
  function updateKeyAreasSelect(level_id) {
    let key_area = event.target.value;
    sendClickEventToSegment('selects_key_area_dropdown', {
      userId: '#{current_user&.id}',
      email: '#{current_user&.email}',
      hasValidSubscription: '#{current_user&.valid_subscription?}',
      isEmailVerified: '#{current_user&.email_verified}',
      preferredExamBodyId: '#{current_user&.preferred_exam_body_id}',
      isLoggedIn: '#{!current_user&.nil?}',
      sessionId: '#{session&.id}',
      programName: '#{@group&.name}',
      value: key_area
    })

    $.ajax({
      url: '/courses/units_by_key_area',
      dataType: 'json',
      method: 'POST',
      async: false,
      contentType: "application/json; charset=utf-8",
      data: JSON.stringify({'key_area_id': key_area}),
      success: function (data) {
        let select_id = "#" + level_id + "-units-select";
        var $el = $(select_id);
        $el.empty(); // remove old options
        $.each(data, function(key,value) {
          if(value == 1) { var unit_value = ' unit/hour'} else { var unit_value = ' units/hours' }

          $el.append($("<option></option>")
            .attr("value", value).text(value + unit_value));
        });
        $el.prepend("<option value='' selected='selected'>All</option>");
      },
      error: function (xhr, status, error) {
        console.error(error);
      }
    });
  };
