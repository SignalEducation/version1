%main
  %article.bg-gray5
    .container
      %header.hero-section
        %h1.h1-hero.mb-2
          =order_heading(@order)
        %p.p-hero.px-lg-8
          =order_short_description(@order)

      -if flash[:success] || flash[:error] || flash[:warning]
        =render partial: 'layouts/flash_messages'

      %section.pb-md-3.pb-2
        .order-checkout-section
          .container#product_purchase
            =form_for([@product, @order], html: {id: 'orders-form', class: 'payment', role: 'form'}) do |f|
              =f.hidden_field :product_id, value: @order.product.id
              =f.hidden_field :stripe_payment_method_id
              =f.hidden_field :use_paypal, value: false
              =render partial: '/layouts/error_messages', locals: {thing: @order, message: nil}

              .row
                .col-lg-6.mb-5.mb-xl-0
                  .row
                    .col-lg-8.offset-2
                      .card.card-link.text-center.mb-5
                        .py-4
                          %h4.text-ellipsis.mb-4
                            =@order.product.name_by_type
                          .pt-2
                            =product_icon(@order.product)
                          .pt-4.pb-2
                            .h6.text-ellipsis
                              Total:
                              %span
                                =number_in_local_currency(@order.product.price, @order.product.currency)
                  .px-4
                    %p.text-left
                      =order_description(@order)

                .col-lg-6.mb-5
                  %fieldset.card.card-payments
                    %p.h2.mb-1 Choose a way to pay
                    %p.mb-4 Select your preferred method of payment
                    .form-group.form-group-expandable
                      .custom-control.custom-radio
                        %input#pay-with-card.custom-control-input.style-radio{:name => "payment-options", :type => "radio", :value => 'stripe', checked: true}
                        %label.custom-control-label{:for => "pay-with-card"}
                          %span.custom-label-info
                            %span.h3.m-0
                              =image_tag('ico-card.svg', :alt => "Credit Card Icon", :class => 'logo-icon.mr-2.mr-sm-3')
                              %span Credit / Debit Card
                          %span.custom-check
                      =render partial: 'orders/order_card_form', locals: {f: f}
                    .form-group.form-group-expandable
                      .custom-control.custom-radio
                        %input#pay-with-paypal.custom-control-input.style-radio{:name => "payment-options", :type => "radio", :value => 'paypal'}
                        %label.custom-control-label{:for => "pay-with-paypal"}
                          %span.custom-label-info
                            %span.h3.m-0
                              =image_tag('ico-paypal.svg', :alt => "PayPal Logo", :class => 'logo-icon.mr-2.mr-sm-3')
                              %span PayPal
                          %span.custom-check
                      =render partial: 'orders/paypal_form', locals: {f: f}


  -if @order.product.faqs.any?
    %article.bg-gray5
      .container-bg.bg-white-light
        .row
          .col-sm-12
            %section.px-2.px-md-8.pb-6
              -@order.product.faqs.each do |faq|
                .faq-box.faq-quest-box
                  .faq-inner.narrow{onclick: '$(this).toggleClass("narrow"); $(this).find(".faq-answer").toggleClass("d-md-block"); $(this).find(".faq-answer-expanded").toggleClass("d-none"); $(this).find(".fa-plus-circle").toggleClass("d-none"); $(this).find(".fa-minus-circle").toggleClass("d-none");'}
                    .faq-title
                      %i.fa.fa-plus-circle.faq-pm-icons{"aria-hidden" => "true"}
                      %i.fa.fa-minus-circle.faq-pm-icons.d-none{"aria-hidden" => "true"}
                      =faq.question_text.html_safe
                    .faq-answer-expanded.d-none
                      =faq.answer_text.html_safe


:javascript

  let currencyIso = "#{@order.product.currency.iso_code}";
  let productName = "#{@order.product.name}";
  let productId = "#{@order.product.id}";
  let productPrice = "#{@order.product.price}";
  let productBody = "#{@order.exam_body_name}";
  let productBodyId = "#{@order.exam_body_id}";
  let productType = "#{@order.product&.product_type}";
  let analyticsData = {exam_body_id: productBodyId, exam_body_name: productBody, onboarding: "#{current_user&.onboarding_process&.active&.to_s}", product_id: productId, product_name: productName, product_price: productPrice, currency_iso_code: currencyIso};

  $(document).on('ready', function() {

    $('#pay-with-card').closest('.custom-control').siblings('.payment-details').slideDown();
    $('#pay-with-paypal').closest('.custom-control').siblings('.payment-details').slideUp();
    selectPaymentMethod($('.form-group-expandable').val(), false);

    $('.form-group-expandable').on('change', '.custom-control-input[type="radio"][name="payment-options"]', function() {
      $(this).closest('.card').find('.custom-control-input[type="radio"]').closest('.custom-control').siblings('.payment-details').slideUp();
      if ($(this).is(':checked')) {
        $(this).closest('.custom-control').siblings('.payment-details').slideDown();
        selectPaymentMethod($(this).val(), true);
        $('#stripe_terms_and_conditions').prop('required', true);
        $('#paypal_terms_and_conditions').prop('required', true);
      }
    });

    function selectPaymentMethod(paymentType, click) {
      if (click === true) {
        providerOptionSelect(analyticsData, paymentType);
      }
      switch(paymentType) {
        case 'paypal':
          $('#order_use_paypal').val(true);
          break;
        case 'stripe':
          $('#order_use_paypal').val(false);
          break;
        default:
          $('#order_use_paypal').val(false);
      }
    }

    function acceptedTerms(paymentType) {
      switch(paymentType) {
        case 'paypal':
          $('#stripe_terms_and_conditions').prop('required', false);
          return true;
        case 'stripe':
          $('#paypal_terms_and_conditions').prop('required', false);
          return true;
        default:
          return false;
      }
    }


    $(".spinning-loading").hide();

    var style = {
      base: {
        color: '#32325d',
        lineHeight: '18px',
        fontFamily: '"Rubik", "Helvetica Neue", Helvetica, sans-serif',
        fontSmoothing: 'antialiased',
        fontSize: '16px',
        '::placeholder': {
          color: '#aab7c4'
        }
      },
      invalid: {
        color: '#fa755a',
        iconColor: '#fa755a'
      }
    };

    var stripe = Stripe('#{ENV['LEARNSIGNAL_V3_STRIPE_PUBLIC_KEY']}');
    var elements = stripe.elements();

    var card = elements.create('card', {hidePostalCode: true, style: style});
    card.mount('#card-element');

    // Create a token when the form is submitted.
    var form = document.getElementById('orders-form');
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      //Replace submit button with spinning JS
      $('#card_submit').prop('disabled',true);
      $('#card_submit').hide();
      $('#paypal_submit').prop('disabled',true);
      $('#paypal_submit').hide();
      $(".spinner-message").html("Please wait...");
      $(".spinning-loading").show();
      if ($('#order_use_paypal').val() === 'true') {
        paypalSubmit(analyticsData);
        if(acceptedTerms('paypal')){
          document.getElementById('orders-form').submit();
        }
      } else {
        stripeSubmit(analyticsData);
        if(acceptedTerms('stripe')){
          createPaymentMethod();
        }
      }
    });

    card.addEventListener('change', function(event) {
      var displayError = document.getElementById('card-errors');
      if (event.error) {
        displayError.textContent = event.error.message;
      } else {
        displayError.textContent = '';
      }
    });

    card.on('focus', function() {
      stripeFormFocus(analyticsData);
    });

    function createPaymentMethod() {
      stripe.createPaymentMethod('card', card).then(function(result) {
        if (result.error) {
          resetForm(result.error)
        } else {
          $('#order_stripe_payment_method_id').val(result.paymentMethod.id);
          $.ajax({
            type: 'POST',
            url: "#{product_orders_path(@order.product)}",
            data: $(form).serialize(),
            dataType: 'json',
            success: function(data,status,xhr){
              if(data.status == 'pending_3d_secure'){
                handlePayment(data.client_secret, data.id)
              }else if(data.status == 'completed'){
                // Can we add a flash message ?
                window.location.replace(data['url']);
              }
            },
            error: function(xhr,status,error){
              resetForm(xhr.responseJSON.error);
            }
          });
        }
      });
    };

    function handlePayment(client_secret, order_id){
      let orderStatus = '';
      $(".spinner-message").html("Still processing...");
      stripe.handleCardAction(client_secret, card).then(function(result) {
        if (result.error) {
          resetForm(result.error);
          orderStatus = 'pending';
        } else {
          orderStatus = result['paymentIntent']['status'];
        }
          $.ajax({
            type: 'PATCH',
            url: '/orders/' + order_id,
            data: { status: orderStatus },
            dataType: 'json',
            success: function(data,status,xhr){
              if (data.status == 'completed') {
                // Can we add a flash message ?
                window.location.replace(data['url']);
              } else {
                resetForm(data);
              }
            },
            error: function(xhr,status,error){
              resetForm(xhr.responseJSON.error);
            }
        });
      });
    };

    function resetForm(error) {
      var errorElement = document.getElementById('card-errors');
      errorElement.textContent = error.message;
      $('#card_submit').prop('disabled',false);
      $('#card_submit').show();
      $('#paypal_submit').show();
      $(".spinning-loading").hide();
    }


    analytics.page('Payment', {
      exam_body_id: productBodyId,
      exam_body_name: productBody,
      onboarding: "#{current_user&.onboarding_process&.active&.to_s}",
      currency: currencyIso,
      product_id: productId,
      product_price: productPrice,
      product_name: productName,
      product_type: productType
    });
  });
